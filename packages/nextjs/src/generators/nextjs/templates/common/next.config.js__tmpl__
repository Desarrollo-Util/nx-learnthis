// eslint-disable-next-line @typescript-eslint/no-var-requires
const { join } = require('path');
const { appRootPath } = require('@nrwl/workspace/src/utilities/app-root');
const { workspaceLayout } = require('@nrwl/workspace/src/core/file-utils');

const regexEqual = (x, y) => {
	return (
		x instanceof RegExp &&
		y instanceof RegExp &&
		x.source === y.source &&
		x.global === y.global &&
		x.ignoreCase === y.ignoreCase &&
		x.multiline === y.multiline
	);
};

const getNextConfig = (nextConfig = {}) => {
	/**
	 * In collaboration with Vercel themselves, we have been advised to set the "experimental-serverless-trace" target
	 * if we detect that the build is running on Vercel to allow for the most ergonomic configuration for Vercel users.
	 */
	if (process.env.NOW_BUILDER) {
		console.log(
			'withNx() plugin: Detected Vercel build environment, applying "experimental-serverless-trace" target'
		);
		nextConfig.target = 'experimental-serverless-trace';
	}

	if (nextConfig.future?.webpack5) {
		throw new Error(
			'withNx() plugin: using the "webpack5" option with Nx is not supported yet'
		);
	}

	const userWebpack = nextConfig.webpack || (x => x);
	return {
		...nextConfig,
		webpack: (config, options) => {
			/*
			 * Update babel to support our monorepo setup.
			 * The 'upward' mode allows the root babel.config.json and per-project .babelrc files to be picked up.
			 */
			options.defaultLoaders.babel.options.babelrc = true;
			options.defaultLoaders.babel.options.rootMode = 'upward';

			/*
			 * Modify the Next.js webpack config to allow workspace libs to use css modules.
			 * Note: This would be easier if Next.js exposes css-loader and sass-loader on `defaultLoaders`.
			 */

			// Include workspace libs in css/sass loaders
			const includes = [join(appRootPath, workspaceLayout().libsDir)];

			const nextCssLoaders = config.module.rules.find(
				rule => typeof rule.oneOf === 'object'
			);

			// webpack config is not as expected
			if (!nextCssLoaders) return config;

			/*
			 *  1. Modify css loader to enable module support for workspace libs
			 */
			const nextCssLoader = nextCssLoaders.oneOf.find(
				rule =>
					rule.sideEffects === false && regexEqual(rule.test, /\.module\.css$/)
			);
			// Might not be found if Next.js webpack config changes in the future
			if (nextCssLoader) {
				nextCssLoader.issuer.or = nextCssLoader.issuer.and
					? nextCssLoader.issuer.and.concat(includes)
					: includes;
				delete nextCssLoader.issuer.and;
			}

			return userWebpack(config, options);
		},
	};
};

module.exports = getNextConfig({});
